import java.text.SimpleDateFormat

def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss'Z'")
df.setTimeZone(TimeZone.getTimeZone("UTC"))
def buildTime = df.format(new Date())

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.7
    def vendor = 'Liquorice.io'

    group = 'io.liquorice'
    version = '0.0.1-SNAPSHOT'

    jar.doFirst {
        manifest {
            attributes(
                    'Manifest-Version'			: '1.0',
                    'Created-By'				: vendor,
                    'Specification-Title'		: project.name,
                    'Specification-Version'		: version,
                    'Specification-Vendor'		: vendor,
                    'Implementation-Title'		: project.name,
                    'Implementation-Version'	: version,
                    'Implementation-Vendor'		: vendor,
                    'Class-Path'				: configurations.compile.collect { it.getName() }.join(' '),
                    'Build-Name'				: "${group}:${project.name}:?:${version}",
                    'Build-Time'				: buildTime
            )
        }
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile group: 'org.json', name: 'json', version: '20140107'

        testCompile group: 'org.testng', name: 'testng', version: '6.9.4'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'

        integrationTestCompile sourceSets.main.output
        integrationTestCompile configurations.testCompile
        integrationTestRuntime sourceSets.test.output
        integrationTestRuntime configurations.testRuntime
    }

    // Unit testing
    test {
        useTestNG()
    }


    // Integration testing
    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        mustRunAfter test
        useTestNG()
    }
    check.dependsOn integrationTest


    // Reporting
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }
}
